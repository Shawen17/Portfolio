export const ProjectData = [
  {
    id: 1,
    theme: "/img/theme1.jpg",
    title: "WeAreHere",
    desc: "Opening artisans and real-estate world",
    stack: [
      "React",
      "Django",
      "Typescript",
      "JavaScript",
      "Python",
      "Redux",
      "Styled-Components",
      "Material-UI",
      "HTML",
      "CSS",
      "RestAPI",
      "Bootstrap",
      "PostgreSQL",
      "Git",
      "Jest",
      "CI/CD",
      "AWS EC2",
      "linux",
    ],
    details:
      "Empowering artisans with limitless service opportunities and granting real estate agents administrative rights to upload and oversee properties and bookings through a subscription package.",
    link: "www.wearehere.ng",
    github: [],
    images: [
      "/projectimage/wearehere1.png",
      "/projectimage/wearehere2.png",
      "/projectimage/wearehere3.png",
      "/projectimage/wearehere4.png",
    ],
    themecolor: "white",
  },
  {
    id: 2,
    theme: "/img/theme2.jpg",
    title: "BeeMathWorld",
    desc: "household items for easy life ",
    stack: [
      "React",
      "Django",
      "JavaScript",
      "Python",
      "Redux",
      "Styled-Components",
      "Material-UI",
      "HTML",
      "CSS",
      "RestAPI",
      "Bootstrap",
      "PostgreSQL",
      "Git",
      "Jest",
      "CI/CD",
      "AWS EC2",
      "linux",
    ],
    details:
      "An e-commerce application designed to empower merchants with efficient inventory tracking and seamless product variant management. The app provides detailed illustrations of each product, offering users a comprehensive understanding before making a purchase.",
    link: "https://www.beemathworld.ng",
    github: [],
    images: [
      "/projectimage/beemath1.png",
      "/projectimage/beemath2.png",
      "/projectimage/beemath3.png",
      "/projectimage/beemath4.png",
    ],
    themecolor: "white",
  },
  {
    id: 3,
    theme: "/img/theme3.jpg",
    title: "DashMe",
    desc: "Your go to gift Item place",
    stack: [
      "Django",
      "JavaScript",
      "Python",
      "HTML",
      "CSS",
      "Bootstrap",
      "PostgreSQL",
      "Git",
    ],
    details:
      "Fostering social connections through a platform that facilitates the free exchange of gift items from generous individuals. Our integrated payment gateway covers delivery costs, and our operational logic ensures that each order, limited to four items, can include only one premium gift. Additionally, users are restricted from placing more than one order within a 3-day period.",
    link: "",
    github: ["https://github.com/shawen17/Dashme"],
    images: [
      "/projectimage/dashme1.png",
      "/projectimage/dashme2.png",
      "/projectimage/dashme3.png",
      "/projectimage/dashme4.png",
    ],
    themecolor: "white",
  },
  {
    id: 4,
    theme: "/projectimage/scrummy1.png",
    title: "ScrummyDessert",
    desc: "Your taste-buds can't get enough",
    stack: [
      "Django",
      "JavaScript",
      "Python",
      "HTML",
      "CSS",
      "Bootstrap",
      "PostgreSQL",
      "Git",
    ],
    details:
      "Place an order for your delectable parfait and desserts, and also reserve services for your events.",
    link: "",
    github: ["https://github.com/shawen17/scrummydessert"],
    images: [
      "/projectimage/scrummy1.png",
      "/projectimage/scrummy2.png",
      "/projectimage/scrummy3.png",
      "/projectimage/scrummy4.png",
    ],
    themecolor: "white",
  },
  {
    id: 5,
    theme: "/img/theme5.jpg",
    title: "LendSqr",
    desc: "Manage your customers",
    stack: [
      "React",
      "JavaScript",
      "Styled-Components",
      "Material-UI",
      "HTML",
      "CSS",
      "Git",
      "Jest",
      "CI/CD",
      "RestAPI",
      "Redux",
      "Django",
      "Python",
      "AWS s3",
      "AWS EC2",
      "AWS RDS",
      "MongoDB",
    ],
    details:
      "Administrative portal designed for a loan-as-a-service application, providing access to comprehensive user details and allowing functions such as filtering, activation, and blacklisting of users.",
    link: "https://oluwaseun-johnson-lendsqr-fe-test.netlify.app",
    github: ["https://github.com/shawen17/lendsqr"],
    images: [
      "/projectimage/lend1.png",
      "/projectimage/lend2.png",
      "/projectimage/lend3.png",
      "/projectimage/lend4.png",
    ],
    themecolor: "white",
  },
  {
    id: 6,
    theme: "/img/theme6.jpeg",
    title: "E-commerce",
    desc: "animated transition feel",
    stack: [
      "React",
      "JavaScript",
      "Styled-Components",
      "Material-UI",
      "HTML",
      "CSS",
      "Git",
      "Jest",
      "CI/CD",
    ],
    details:
      "As a team member, I contributed to the development of the product and product details pages for an e-commerce website. The pages feature scroll, click, and page transition effects, with a focus on a mobile-first approach.",
    link: "https://teal-frangipane-00d1ed.netlify.app",
    github: ["https://github.com/shawen17/greenhouse"],
    images: [
      "/projectimage/green1.png",
      "/projectimage/green2.png",
      "/projectimage/green3.png",
      "/projectimage/green4.png",
    ],
    themecolor: "white",
  },
  {
    id: 7,
    theme: "/img/jenkins.png",
    title: "Container Pipeline",
    desc: "continious development and deployment",
    stack: [
      "React",
      "JavaScript",
      "Styled-Components",
      "Material-UI",
      "HTML",
      "CSS",
      "Git",
      "Jenkins",
      "Docker",
      "Redux",
      "Redux-persist",
    ],
    details:
      "A continious development and deployment pipeline for React and Django project. The Jenkins pipeline build docker images for the project, create tags and push the images to Github Registry(GHCR), then stop all running containers, delete the containers and their corresponding images, and finally run the containers from the latest version of the built images. So, just like every pipeline should behave, if a code is committed to git, the Jenkins circle starts all over again.",
    link: "",
    github: ["https://github.com/shawen17/boom-app"],
    images: ["/projectimage/jenkins_2.png", "/projectimage/jenkins_1.png"],
    themecolor: "#1e90ff",
  },
  {
    id: 8,
    theme: "/img/lambda.png",
    title: "AWS Lambda Function",
    desc: "Node.js development and deployment",
    stack: [
      "Node.js",
      "JavaScript",
      "Git",
      "Jenkins",
      "Docker",
      "AWS s3",
      "AWS SAM",
      "AWS Lambda",
      "MongoDB",
    ],
    details:
      "An optimized backend developed with Express.js, serving as the API endpoint for a loan service application. Deployed with a CI/CD Jenkins pipeline to AWS Lambda via AWS SAM CLI and uses MongoDB as the database.",
    link: "",
    github: ["https://github.com/shawen17/aws-boom-backend-lambda"],
    images: [
      "/projectimage/lambda_1.png",
      "/projectimage/lambda_2.png",
      "/projectimage/lambda_3.png",
    ],
    themecolor: "white",
  },
  {
    id: 9,
    theme: "/img/shopify4.png",
    title: "Shopify ERP Integration",
    desc: "Integration of Shopify with an ERP",
    stack: [
      "Express.js",
      "React",
      "JavaScript",
      "REST API",
      "Git",
      "Redis",
      "Docker",
      "MariaDB",
      "Docker-compose",
      "Shopify Api",
      "Nginx",
    ],
    details:
      "Step into the future of business management with our turbocharged ERP built on Express.js! Effortlessly create, update, and delete Customers and Companies using Shopify’s Customers API. This slick system syncs both your Shopify and ERP databases in perfect harmony, thanks to Sequelize's atomic transactions. If something goes sideways, no worries—either both databases update together, or nothing changes, rolling back to keep everything smooth. And when Shopify’s API decides to play hard-to-get? No problem! We’ve got a built-in retry system with a cool exponential delay to keep the sync running strong, even during network hiccups",
    link: "https://www.linkedin.com/feed/update/urn:li:activity:7249070989735534592/",
    github: ["https://github.com/Shawen17/shopify"],
    images: [
      "/projectimage/shopify1.png",
      "/projectimage/shopify2.png",
      "/projectimage/shopify3.png",
    ],
    themecolor: "black",
  },
  {
    id: 10,
    theme: "/img/logistics1.png",
    title: "E-commerce Logistics",
    desc: "Logistics service in a microservice",
    stack: [
      "Flask",
      "React",
      "JavaScript",
      "Typescript",
      "Git",
      "GraphQL",
      "Redis",
      "Docker",
      "MariaDB",
      "Docker-compose",
      "Prometheus",
      "Grafana",
      "Nginx",
    ],
    details:
      "This logistics module for an e-commerce platform is designed for seamless functionality and scalability using a microservice architecture. The frontend provides a modern, component-driven interface with a consistent UI/UX, enabling smooth user interaction. On the backend, secure authentication and authorization are ensured with JWT middleware, while Redis caching optimizes performance by reducing the database load during repeated token checks. GraphQL was used as the API to communicate between services. The system supports three distinct roles—Picker, Team Lead, and Manager—each with specific permissions to ensure proper access control and task management. The API follows RESTful principles for structured communication between services. Comprehensive logging, reverse proxying through Nginx, and real-time monitoring using Prometheus with visual dashboards in Grafana further enhance reliability and performance, making this module a powerful solution for e-commerce logistics.",
    link: "https://www.linkedin.com/feed/update/urn:li:activity:7236378025884336128/",
    github: ["https://github.com/Shawen17/Logistics-service"],
    images: [
      "/projectimage/logistics2.png",
      "/projectimage/logistics3.png",
      "/projectimage/logistics4.png",
      "/projectimage/logistics5.png",
      "/projectimage/logistics6.png",
    ],
    themecolor: "#1e90ff",
  },
];

export const services = [
  {
    id: 1,
    icon: <i className="pi pi-database" style={{ fontSize: "2.5rem" }}></i>,
    title: "Backend Development",
    description:
      "Creating backend models, designing data structures, implementing logic, optimizing performance, and building RESTful APIs.",
  },
  {
    id: 2,
    icon: <i className="pi pi-desktop" style={{ fontSize: "2.5rem" }}></i>,
    title: "Frontend Development",
    description:
      "Designing visually engaging and intuitive interfaces that prioritize swift loading.",
  },
  {
    id: 3,
    icon: <i className="pi pi-server" style={{ fontSize: "2.5rem" }}></i>,
    title: "FullStack Development",
    description:
      "Integrating the frontend and backend with APIs with CI/CD approach using AWS Cloud services",
  },
];
